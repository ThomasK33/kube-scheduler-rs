version: v2beta1
name: kube-scheduler-rs

vars:
  REGISTRY:
    source: env
    default: ghcr.io

images:
  kube-scheduler-rs:
    image: ${REGISTRY}/thomask33/kube-scheduler-rs
    dockerfile: ./Dockerfile

deployments:
  kube-scheduler-rs:
    kubectl:
      manifests:
        - deployment/kube-scheduler-rs.yaml

dev:
  kube-scheduler-rs:
    # Search for the container that runs this image
    imageSelector: ${REGISTRY}/thomask33/kube-scheduler-rs
    namespace: kube-scheduler-rs
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    devImage: ghcr.io/loft-sh/devspace-containers/rust:1.67-alpine
    # Sync files between the local filesystem and the development container
    sync:
      - path: ./
        uploadExcludeFile: .dockerignore
      - path: "${DEVSPACE_USER_HOME}/.gitconfig:/root/.gitconfig"
        file: true
        disableDownload: true
    workingDir: /app
    terminal:
      command: ./devspace_start.sh
    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    ssh:
      enabled: true
      useInclude: true
    # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl
      - command: k9s
      - command: helm
      - gitCredentials: true
    # Resource requirements
    resources:
      requests:
        cpu: "2"
        memory: 2Gi
  kube-scheduler-rs-vscode:
    # Search for the container that runs this image
    imageSelector: ${REGISTRY}/thomask33/kube-scheduler-rs
    namespace: kube-scheduler-rs
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    devImage: mcr.microsoft.com/devcontainers/rust:latest
    # Sync files between the local filesystem and the development container
    sync:
      - path: ./
        uploadExcludeFile: .dockerignore
      - path: "${DEVSPACE_USER_HOME}/.gitconfig:/root/.gitconfig"
        file: true
        disableDownload: true
    workingDir: /app
    command:
      - sh
      - -c
      - "tail -f /dev/null"
    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    ssh:
      enabled: true
      useInclude: true
    # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl
      - command: k9s
      - command: helm
      - gitCredentials: true
    # Resource requirements
    resources:
      requests:
        cpu: "2"
        memory: 2Gi

# Use the `commands` section to define repeatable dev workflows for this project
commands:
  deploy-multiple-pods:
    description: Deploy multiple, equivalent pods to Kubernetes
    section: deploy
    command: |-
      kubectl apply -f examples/multiple.yaml
  deploy-single-pod:
    description: Deploy a single pod to Kubernetes
    section: deploy
    command: |-
      kubectl apply -f examples/pause.yaml
  deploy-qos:
    description: Deploy three pods with different QoS to Kubernetes
    section: deploy
    command: |-
      kubectl apply -f examples/qos.yaml

  redeploy-multiple-pods:
    description: Redeploys multiple, equivalent pods to Kubernetes
    section: redeploy
    command: |-
      kubectl delete -f examples/multiple.yaml
      kubectl apply -f examples/multiple.yaml
  redeploy-single-pod:
    description: Redeploy a single pod to Kubernetes
    section: redeploy
    command: |-
      kubectl delete -f examples/pause.yaml
      kubectl apply -f examples/pause.yaml
  redeploy-qos:
    description: Redeploy three pods with different QoS to Kubernetes
    section: redeploy
    command: |-
      kubectl delete -f examples/qos.yaml
      kubectl apply -f examples/qos.yaml

pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      create_deployments --all              # 1. Deploy Helm charts and manifests specified as "deployments"
      start_dev kube-scheduler-rs           # 2. Start dev mode "kube-scheduler-rs" (see "dev" section)

  # This is the pipeline for stopping the dev command: `devspace run-pipeline stop`
  stop:
    run: |-
      stop_dev --all

  # This is the pipeline for launching the environment in vscode: `devspace run-pipeline vscode`
  vscode:
    run: |-
      create_deployments --all              # 1. Deploy Helm charts and manifests specified as "deployments"
      start_dev kube-scheduler-rs-vscode    # 2. Start dev mode "kube-scheduler-rs-vscode" (see "dev" section)

      # Open VSCode as soon as we are done
      code --folder-uri vscode-remote://ssh-remote+kube-scheduler-rs-vscode.kube-scheduler-rs.devspace/app

  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      build_images --all -t $(git describe --always)    # 1. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all                          # 2. Deploy Helm charts and manifests specified as "deployments"
